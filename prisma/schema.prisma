// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id
  name            String
  username        String    @unique
  displayUsername String?
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]

  workspaces   Workspace[]
  folders      Folder[]
  snippets     Snippet[]
  comments     Comment[]
  commentLikes CommentLike[]
  stars        SnippetStar[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Workspace {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String  @unique

  // relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  folders  Folder[]
  snippets Snippet[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, name]) // unique workspace name for each user
  @@map("workspace")
}

model Folder {
  id          String  @id @default(cuid())
  name        String
  description String?

  // relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  snippets Snippet[]

  // metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([workspaceId, userId, name]) // unique folder name for each workspace and user
  @@map("folder")
}

model Snippet {
  id          String  @id @default(cuid())
  name        String
  description String?
  code        String
  public      Boolean @default(true) // by default all snips are public

  // relations
  folderId String
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
  stars    SnippetStar[]

  // counts
  startCount Int @default(0) // denormalize from SnippetStar table => number of rows in SnippetStar
  commentCount Int @default(0) // denormalize from SnippetStar table => number of rows in Comments tables

  // timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // expiresAt DateTime : TODO : add this field to keep expiry of 24hrs, 7 days, 30 days.
}

model Comment {
  id      String @id @default(cuid())
  content String

  snippetId String
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes CommentLike[]

  // metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comment")
}

model CommentLike {
  id String @id @default(cuid())

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([commentId, userId]) // a user can like a comment only once
  @@map("comment_like")
}

model SnippetStar {
  id String @id @default(cuid())

  snippetId String
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId,snippetId]) // a user can star only once
  @@map("snippet_star")
}
